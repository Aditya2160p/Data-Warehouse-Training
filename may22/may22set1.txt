---MongoDB Schema & Relationships Exercise Set

PS C:\Users\adity> mongosh
---1 Create a database named trainingdb 
---2 Create a collection employees with documents that include: name (string) age (number) isManager (boolean) skills (array of strings) joiningDate (date) profile (sub-document with linkedin and portfolio
---3. Insert 4 employees with varying skill sets and joining dates

training> db.employees.insertMany([
{ name:"aditya", age:30, isManager:true, skills:["Java","mongodb","c#"], joiningDate:new Date("2025-05-20"), profile:{ linkedin:"l-url", portfolio:"p-url"},{ name: "kisore", age: 31, isManager: false, skills: ["React", "mysql", "c++"], joiningDate: new Date("2025-05-29"), profile: { linkedin: "l-url", portfolio: "p-url" } }, { name: "priya", age: 29, isManager: false, skills: ["devops", "jira", "Scrum"], joiningDate: new Date("2025-03-01"), profile: { linkedin: "l-url", portfolio: "p-url" } } , { name: "ram", age: 35, isManager: true, skills: ["hibernate", "java", "Spring"], joiningDate: new Date("2025-01-01"), profile: { linkedin: "l-url", portfolio: "p-url" } } 
])

training> db.employees.find()
[
  {
    _id: ObjectId('682f18f832c952a84b6c4bd0'),
    name: 'aditya',
    age: 30,
    isManager: true,
    skills: [ 'Java', 'mongodb', 'c#' ],
    joiningDate: ISODate('2025-05-20T00:00:00.000Z'),
    profile: { linkedin: 'l-url', portfolio: 'p-url' }
  },
  {
    _id: ObjectId('682f192f32c952a84b6c4bd1'),
    name: 'kisore',
    age: 31,
    isManager: false,
    skills: [ 'React', 'mysql', 'c++' ],
    joiningDate: ISODate('2025-05-29T00:00:00.000Z'),
    profile: { linkedin: 'l-url', portfolio: 'p-url' }
  },
  {
    _id: ObjectId('682f198d32c952a84b6c4bd2'),
    name: 'priya',
    age: 29,
    isManager: false,
    skills: [ 'devops', 'jira', 'Scrum' ],
    joiningDate: ISODate('2025-03-01T00:00:00.000Z'),
    profile: { linkedin: 'l-url', portfolio: 'p-url' }
  },
  {
    _id: ObjectId('682f19c032c952a84b6c4bd3'),
    name: 'ram',
    age: 35,
    isManager: true,
    skills: [ 'hibernate', 'java', 'Spring' ],
    joiningDate: ISODate('2025-01-01T00:00:00.000Z'),
    profile: { linkedin: 'l-url', portfolio: 'p-url' }
  }
]


---4 Query all employees who:
---a.Have more than 2 skills
training> db.employees.find({"skills.2":{$exists:true}})
[
  {
    _id: ObjectId('682f18f832c952a84b6c4bd0'),        
    name: 'aditya',
    age: 30,
    isManager: true,
    skills: [ 'Java', 'mongodb', 'c#' ],
    joiningDate: ISODate('2025-05-20T00:00:00.000Z'), 
    profile: { linkedin: 'l-url', portfolio: 'p-url' }
  },
  {
    _id: ObjectId('682f192f32c952a84b6c4bd1'),        
    name: 'kisore',
    age: 31,
    isManager: false,
    skills: [ 'React', 'mysql', 'c++' ],
    joiningDate: ISODate('2025-05-29T00:00:00.000Z'), 
    profile: { linkedin: 'l-url', portfolio: 'p-url' }
  },
  {
    _id: ObjectId('682f198d32c952a84b6c4bd2'),        
    name: 'priya',
    age: 29,
    isManager: false,
    skills: [ 'devops', 'jira', 'Scrum' ],
    joiningDate: ISODate('2025-03-01T00:00:00.000Z'), 
    profile: { linkedin: 'l-url', portfolio: 'p-url' }
  },
  {
    _id: ObjectId('682f19c032c952a84b6c4bd3'),        
    name: 'ram',
    age: 35,
    isManager: true,
    skills: [ 'hibernate', 'java', 'Spring' ],        
    joiningDate: ISODate('2025-01-01T00:00:00.000Z'), 
    profile: { linkedin: 'l-url', portfolio: 'p-url' }
  }
]


---b.Joined after a specific date

training> db.employees.find({joiningDate:{$gt:new Date("2025-01-01")}})
[
  {
    _id: ObjectId('682f18f832c952a84b6c4bd0'),
    name: 'aditya',
    age: 30,
    isManager: true,
    skills: [ 'Java', 'mongodb', 'c#' ],
    joiningDate: ISODate('2025-05-20T00:00:00.000Z'),
    profile: { linkedin: 'l-url', portfolio: 'p-url' }
  },
  {
    _id: ObjectId('682f192f32c952a84b6c4bd1'),
    name: 'kisore',
    age: 31,
    isManager: false,
    skills: [ 'React', 'mysql', 'c++' ],
    joiningDate: ISODate('2025-05-29T00:00:00.000Z'),
    profile: { linkedin: 'l-url', portfolio: 'p-url' }
  },
  {
    _id: ObjectId('682f198d32c952a84b6c4bd2'),
    name: 'priya',
    age: 29,
    isManager: false,
    skills: [ 'devops', 'jira', 'Scrum' ],
    joiningDate: ISODate('2025-03-01T00:00:00.000Z'),
    profile: { linkedin: 'l-url', portfolio: 'p-url' }
  }
]

---5 Add a new field rating (float) to one employee
training> db.employees.updateOne({name:"aditya"},{$set:{rating:8.1}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}


---6 Find all employees with rating field of type double

training> db.employees.find({rating:{$type:"double"}})
[
  {
    _id: ObjectId('682f18f832c952a84b6c4bd0'),
    name: 'aditya',
    age: 30,
    isManager: true,
    skills: [ 'Java', 'mongodb', 'c#' ],
    joiningDate: ISODate('2025-05-20T00:00:00.000Z'),
    profile: { linkedin: 'l-url', portfolio: 'p-url' },
    city: 'Coimbatore',
    rating: 8.1
  }
]



---7 Exclude the _id field in a query result and show only name and skills
training> db.employees.find({},{_id:0,name:1,skills:1})
[
  { name: 'aditya', skills: [ 'Java', 'mongodb', 'c#' ] },
  { name: 'kisore', skills: [ 'React', 'mysql', 'c++' ] },
  { name: 'priya', skills: [ 'devops', 'jira', 'Scrum' ] },
  { name: 'ram', skills: [ 'hibernate', 'java', 'Spring' ] }
]


---Section 2: One-to-One (Embedded) 
---1 Create a database schooldb
test>use schooldb
---2 In the students collection, insert 3 student documents with: Embedded guardian sub-document (name, phone, relation)
schooldb> db.students.insertMany([
... {
... name:"Aditya",
... age:13,
... guardian:{
... name:"Ram",
... phone:"3141414141",
... relation:"Father"}
…},{ name: "Bruce", age: 10, guardian: { name: "Martha", phone: "871239871824", relation: "Mother" } }, { name: "Peter", age: 11, guardian: { name: "Peter", phone: "67253742121", relation: "Father" } }   
…])

---3 Query students where the guardian is their "Mother"

schooldb> db.students.find({"guardian.relation":"Mother"})
[
  {
    _id: ObjectId('682f1e1932c952a84b6c4bd5'),
    name: 'Bruce',
    age: 10,
    guardian: { name: 'Martha', phone: '871239871824', relation: 'Mother' }
  }
]

---4 Update the guardian's phone number for a specific student

schooldb> db.students.updateOne({name:"Aditya"},{$set:{"guardian.phone":"3424225323432"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}



---Section 3: One-to-Many (Embedded) 
---1 In the same schooldb, create a teachers collection 
---2 Insert documents where each teacher has an embedded array of classes they teach (e.g., ["Math", "Physics"])
schooldb> use schooldb
already on db schooldb
schooldb> db.teachers.insertMany([
... {name:"virat",
... dept:"Science",
... subject:["phy","chem"]},
... {name:"dhoni",
... dept:"PE",
... subjects:["football","cricket"]}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('682f1f8f32c952a84b6c4bd7'),
    '1': ObjectId('682f1f8f32c952a84b6c4bd8')
  }
}

---3 Query teachers who teach "Physics"
schooldb> db.teachers.find({subject:"phy"})
[
  {
    _id: ObjectId('682f1f8f32c952a84b6c4bd7'),
    name: 'virat',
    dept: 'Science',
    subject: [ 'phy', 'chem' ]
  }
]

---4 Add a new class "Robotics" to a specific teacher's classes array
schooldb> db.teachers.updateOne({ name: "virat" }, { $addToSet: { subject: "Robotics" } })     
{
  acknowledged: true,
  insertedId: null,  
  matchedCount: 1,   
  modifiedCount: 1,  
  upsertedCount: 0   
}

---5 Remove one subject from a teacher’s class list
schooldb> db.teachers.updateOne({name:"dhoni"},{$pull:{subjects:"football"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}


---Section 4: One-to-Many (Referenced) 
---1 Create a database academia 
---2 Insert documents into courses with fields: _id title credits

schooldb> use academia
switched to db academia
academia> db.courses.insertMany([
...   { _id: ObjectId("5050505051"), title: "Machine Learning", credits: 4 },    
...   { _id: ObjectId("5050505052"), title: "Database Systems", credits: 3 }     
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('5050505051'),
    '1': ObjectId('5050505052')
  }
}

---3 Insert documents into students with fields: name enrolledCourse (store  ObjectId reference to a course)
academia> db.students.insertMany([
...   { name: "Ravi", enrolledCourse: ObjectId("5050505051") },
...   { name: "Priya", enrolledCourse: ObjectId("5050505052") }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('682f213432c952a84b6c4bd9'),
    '1': ObjectId('682f213432c952a84b6c4bda')
  }
}
---4 Query students who are enrolled in a specific course (by ObjectId )
academia> db.students.find({ enrolledCourse: ObjectId("") })
[
  {
    _id: ObjectId('682f213432c952a84b6c4bd9'),
    name: 'Ravi',
    enrolledCourse: ObjectId('5050505051')
  }
]

---5. Query the course details separately using the referenced _id
academia> db.courses.find({ _id: ObjectId("5050505051") })
[
  {
    _id: ObjectId('5050505051'),
    title: 'Machine Learning',
    credits: 4
  }
]


---1 Use the academia database 
---2 Use $lookup to join on enrolledCourse 
---3 Show only student name , and students with courses based course title in the output using $project
db.students.aggregate([
  {
    $lookup: {
      from: "courses",
      localField: "enrolledCourse",
      foreignField: "_id",
      as: "courseInfo"
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      courseTitle: { $arrayElemAt: ["$courseInfo.title", 0] }
    }
  }
])

---4. Add a $match after $lookup to get only students enrolled in course 
db.students.aggregate([
  {
    $lookup: {
      from: "courses",
      localField: "enrolledCourse",
      foreignField: "_id",
      as: "courseInfo"
    }
  },
  {
    $match: { "courseInfo.title": "Machine Learning" }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      courseTitle: { $arrayElemAt: ["$courseInfo.title", 0] }
    }
  }
])
